<!DOCTYPE html><html><head><meta charset="UTF-8">
  <meta http-equiv="content-type" content="text/html; charset=UTF8">

  <script src="../Libs/mathjs/math.js"></script>
  <script src="../vmljs/Utils/math.js"></script>
  <script src="../vmljs/Utils/utils.js"></script>
  <script src="../vmljs/Utils/modelEvaluation.js"></script>
  <script src="../vmljs/knn.js"></script>
  <script src="../Libs/d3js/d3-3.5.16/d3.js"></script>
  <script src="../vmljs/Utils/plotHelper.js"></script>
  <script src="knnUI.js">// knnUI.js
// VML - Visualization Machine Learning
// Copyright <c> André Artelt
// The MIT License (MIT)
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

function vml_KnnUI() {
    this.oDataGen = null;
    this.oModel = null;

    this.lData = [];
    this.lLabels = [];
    this.lGrid = [];
    this.lCurve = [];
    this.lDecBound = [];

    this.Init = function() {
        try {
            // Init
            this.oDataGen = oDataGen;
            this.oModel = new vml_KNN();

            // Register eventhandler
            document.getElementById( "fitBtn" ).addEventListener( "click", this.Fit.bind( this ), false );
            document.getElementById( "evalBtn" ).addEventListener( "click", this.Evaluate.bind( this ), false );
        }
        catch( ex ) {
            alert( "Fatal error: Can not initialize!\n" + ex );
        }
    };

    this.PlotRegressionCurve = function() {
        var lData = this.oDataGen.oClassA.Data.length != 0 ? [ this.oDataGen.lData[ 0 ] ] : [ this.oDataGen.lData[1] ];
        lData.push( {label: "Regression curve", data: this.lCurve, lines: {show: true}} );

        $.plot( "#"+this.oDataGen.strPlotDiv, lData, this.oDataGen.oPlotSettings );

        lData.splice( lData.length - 1, 1 ); // Remove current regression curve
    };

    this.PlotDecisionBoundary = function() {
        var oPlotHelper = new vml_PlotHelper();
        oPlotHelper.CreateHeatmapScatterPlot( this.lDecBound, [ { lData: this.oDataGen.oClassA.Data, name: "Class A", color: "red", size: 3.5, symbol: "circle" }, { lData: this.oDataGen.oClassB.Data, name: "Class B", color: "black", size: 3.5, symbol: "circle" } ], "plotArea", 0.05 );
    };

    this.Evaluate = function() {
        try {
            if( ( this.oDataGen.oClassA.Data.length > 0 && this.oDataGen.oClassB.Data.length == 0 ) || ( this.oDataGen.oClassA.Data.length == 0 && this.oDataGen.oClassB.Data.length > 0 ) ) {
                this.EvaluateRegression();
            }
            else {
                this.EvaluateClassifier();
            }
        }
        catch( ex ) {
            alert( "Error: " + ex );
        }
    };

    this.EvaluateRegression = function() {
        // Evaluate model
        var oEvaluation = new vml_RegressionEvaluation( this.lData, this.lLabels, this.oModel ).AllMetrics();

        // Show evaluation
        var oEvalDlg = new vml_EvaluationDlg();
        oEvalDlg.Init( true, oEvaluation );
        oEvalDlg.Show();
    };

    this.EvaluateClassifier = function() {
        // Evaluate model
        var lLabels = this.lLabels.map(function(x){ return x==-1 ? 0 : x })
        var oEvaluation = new vml_ClassifierEvaluation( this.lData, lLabels, this.oModel, 2 ).AllMetrics();

        // Show evaluation
        var oEvalDlg = new vml_EvaluationDlg();
        oEvalDlg.Init( false, oEvaluation );
        oEvalDlg.Show();
    };

    this.Fit = function() {
        try {
            // Only points of one class used => Regression
            if( ( this.oDataGen.oClassA.Data.length > 0 && this.oDataGen.oClassB.Data.length == 0 ) || ( this.oDataGen.oClassA.Data.length == 0 && this.oDataGen.oClassB.Data.length != 0 ) ) {
                this.FitRegression();
            }
            else {  // Classification otherwise
                this.FitClassification();
            }
        }
        catch( ex ) {
            alert( "Error: " + ex );
        }
    };

    this.FitClassification = function() {
        // Multiple classes are used
        this.oDataGen.bSingleDataType = false;

        // Init grid (needed for computing the decision boundary)
        this.lGrid = vml_Utils.BuildGridWithoutBias( -5, 5, -5, 5, 0.05 );

        // Preprocess the data
        var lRawDataA = this.oDataGen.oClassA.Data;
        var lRawDataB = this.oDataGen.oClassB.Data;
        this.lData = [];
        this.lLabels = [];

        for( var i=0; i != lRawDataA.length; i++ ) {
            this.lData.push( lRawDataA[i] );
            this.lLabels.push( -1 );
        }
        for( var i=0; i != lRawDataB.length; i++ ) {
            this.lData.push( lRawDataB[i] );
            this.lLabels.push( 1 );
        }

        // Init model
        this.oModel.Init( this.lData, this.lLabels, this.GetNumberOfNeighbours() );

        // Compute regression curve (no real training/fitting needed due to "lazy learning") and refresh plot
        this.ComputeDecisionBoundary();
        this.PlotDecisionBoundary();

        this.oDataGen.bSingleDataType = false;  // Reset temporary settings (otherwise user has to reload the page in order to perform regresssion)
    };

    this.FitRegression = function() {
        // Only one class is used
        this.oDataGen.bSingleDataType = true;

        // Init grid
        this.lGrid = vml_Utils.BuildGrid1d( -5, 5 );

        // Preprocess the data
        var lRawData = this.oDataGen.oClassA.Data.length != 0 ? this.oDataGen.oClassA.Data : this.oDataGen.oClassB.Data;
        this.lData = [];
        this.lLabels = [];

        for( var i=0; i != lRawData.length; i++ ) {
            this.lData.push( [ lRawData[i][0] ] );
            this.lLabels.push( lRawData[i][1] );
        }

        // Init model
        this.oModel.Init( this.lData, this.lLabels, this.GetNumberOfNeighbours() );

        // Compute regression curve (no real training/fitting needed due to "lazy learning") and refresh plot
        this.ComputeRegressionCurve();
        this.PlotRegressionCurve();
     
        this.oDataGen.bSingleDataType = false;  // Reset temporary settings (otherwise user has to reload the page in order to perform classification)
    };

    this.ComputeDecisionBoundary = function() {
        this.lDecBound = [];  // Reset current boundary
     
        // Compute predicited output for each point
        for( var i=0; i != this.lGrid.length; i++ ) {
            var vecPoint = this.lGrid[ i ];
            var fLabel = this.oModel.PredictClassification( vecPoint )[0];

            this.lDecBound.push( vecPoint.concat( [ fLabel ] ) );
        }
    };

    this.ComputeRegressionCurve = function() {
        this.lCurve = []; // Reset current curve

        // Compute predicited output for each point
        for( var i=0; i != this.lGrid.length; i++ ) {
            var x = this.lGrid[ i ];
            this.lCurve.push( [ x, this.oModel.PredictRegression( [x] ) ] );
        };
    };

    this.GetNumberOfNeighbours = function() {
        var iResult = document.getElementById( "k" ).value;
        if( iResult == "" || iResult == undefined ) {
            return 1;
        }
        else {
            return parseInt( iResult );
        }
    };
}
</script>

  <title>VML - KNN</title>
</head>
<body><div hidden="" by-vulcanize=""><link rel="stylesheet" type="text/css" href="../Components/Footer/footer.css">

<div id="footer" class="footer">
 <br><br><br><br>
  VML - Visualization of Machine Learning<br>
  <a href="https://github.com/andreArtelt/vml">Project on GitHub</a><br>
  Copyright © 2016-2016 André Artelt
</div>

<script>
  function importFooter() {
    // Import/Add
    var oImport = document.currentScript.ownerDocument;

    var oPlaceholder = document.getElementById( 'footerPlaceholder' );
    var oElement = oImport.querySelector( '#footer' );
    oPlaceholder.appendChild( oElement.cloneNode( true ) );

    oElement.parentNode.removeChild( oElement );
  };
</script>
<link rel="stylesheet" type="text/css" href="../Libs/dialog-polyfill/dialog-polyfill.css">
<link rel="stylesheet" type="text/css" href="../styles/dialog.css">
<link rel="stylesheet" type="text/css" href="../Components/Evaluation/evaluation.css">

<script src="../Libs/dialog-polyfill/dialog-polyfill.js"></script>
<script src="../Components/Evaluation/evaluation.js"></script>

<div id="evaluationDlgs">
  <dialog id="evaluationClassifierDlg" class="dialog evalDlg">
    <center><h3>Evaluation</h3></center>
    <form method="dialog">
      <div class="textAlign">
        <section>
          <b>Accuracy: </b>
          <span id="EVAL_ACC"></span>
        </section>
        <section>
          <b>AvgAccPerClass: </b>
          <span id="EVAL_AVGACCPERCLASS"></span>
        </section>
        <section>
          <b>PerClassAcc: </b>
          <span id="EVAL_PERCLASSACC"></span>
        </section>
        <section>
          <b>Confusion matrix: </b>
          <table>
	    <tbody><tr>
              <td>Label\Pred</td>
	      <td>Pos</td>
	      <td>Neg</td>
	    </tr>
	    <tr>
	      <td>Pos</td>
	      <td id="EVAL_CONFMAT_TP"></td>
	      <td id="EVAL_CONFMAT_FN"></td>
            </tr> 
            <tr>
	      <td>Neg</td>
	      <td id="EVAL_CONFMAT_FP"></td>
	      <td id="EVAL_CONFMAT_TN"></td>
	    </tr>
	  </tbody></table>
        </section>
        <section>
          <b>Precision: </b>
          <span id="EVAL_PRECISION"></span>
        </section>
        <section>
          <b>Recall: </b>
          <span id="EVAL_RECALL"></span>
        </section>
        <section>
          <b>F1: </b>
          <span id="EVAL_F1SCORE"></span>
        </section>
        <section>
          <b>FallOut: </b>
          <span id="EVAL_FALLOUT"></span>
        </section>
        <section>
          <b>LogLoss: </b>
          <span id="EVAL_LOGLOSS"></span>
        </section>
      </div>
      <br>

      <button class="dialogBtn">Close</button>
    </form>
  </dialog>

  <dialog id="evaluationRegressionDlg" class="dialog">
    <center><h3>Evaluation</h3></center>
    <form method="dialog">
      <div class="textAlign">
        <section>
          <b>RMSE: </b>
          <span id="EVAL_RMSE"></span>
        </section>
        <section>
          <b>MAPE: </b>
          <span id="EVAL_MAPE"></span>
        </section>
        <section>
          <b>ACP: </b>
          <span id="EVAL_ACP"></span>
        </section>
      </div>
      <br>

      <button class="dialogBtn">Close</button>
    </form>
  </dialog>
</div>

<script>
  function importEvaluation() {
    // Import/Add
    var oImport = document.currentScript.ownerDocument;

    var oPlaceholder = document.getElementById( 'evaluationDlgsPlaceholder' );
    var oElement = oImport.querySelector( '#evaluationDlgs' );
    oPlaceholder.appendChild( oElement.cloneNode( true ) );

    oElement.parentNode.removeChild( oElement );

    // Register dialogs
    dialogPolyfill.registerDialog( document.getElementById( 'evaluationClassifierDlg' ) );
    dialogPolyfill.registerDialog( document.getElementById( 'evaluationRegressionDlg' ) );
  };
</script>
<link rel="stylesheet" type="text/css" href="../Libs/dialog-polyfill/dialog-polyfill.css">
<link rel="stylesheet" type="text/css" href="../styles/buttons.css">
<link rel="stylesheet" type="text/css" href="../styles/tooltips.css">
<link rel="stylesheet" type="text/css" href="../Components/DataGen/dataGen.css">

<script src="../Libs/dialog-polyfill/dialog-polyfill.js"></script>
<script src="../Libs/flot/jquery.js"></script>
<script src="../Libs/flot/jquery.flot.js"></script>
<script src="../Libs/flot/jquery.flot.symbol.js"></script>
<script src="../vmljs/Utils/utils.js"></script>
<script src="../vmljs/Utils/fileHelper.js"></script>
<script src="../vmljs/Utils/matFileHelper.js"></script>
<script src="../vmljs/Utils/jsonHelper.js"></script>
<script src="../vmljs/Utils/csvHelper.js"></script>
<script src="../Components/DataGen/dataGen.js"></script>
<script src="../Libs/base64-arraybuffer-0.1.5/lib/base64-arraybuffer.js"></script>

<div id="dataGen">
  <div id="plotArea" class="boxAlign"></div>
  
  <div class="boxAlign">
    <div class="groupBox">
      <div id="actions">
        <b>Actions:</b><br>
	<button id="undoBtn" class="button">Undo</button>
        <button id="resetBtn" class="button">Reset</button><br>
        <div id="exportBtn" class="dropdown dropDownBtn">Export
         <div class="dropdown-content">
           <button id="btnExportToJSON" class="button">JSON</button>
           <button id="btnExportToCSV" class="button">CSV</button>
           <button id="btnExportToMAT" class="button">MAT</button>
         </div>
        </div>
        <div id="importBtn" class="dropdown dropDownBtn">Import
         <div class="dropdown-content">
           <button id="btnImportFromJSON" class="button">JSON</button>
           <button id="btnImportFromCSV" class="button">CSV</button>
	   <button id="btnImportFromMAT" class="button" onclick="document.getElementById('ctrlImportFromMAT').click();">MAT</button>
         </div>
        </div>
        <input id="ctrlImportFromMAT" type="file" name="file" style="visibility:hidden">
      </div> 
      <br>
      <div id="dataGenType">
        <div class="tooltip"><b>Click type:</b>
        <span class="tooltiptext">Specify what type of point a click in the plot will generate</span>
        </div><br>
        <input type="radio" name="dataClass" id="genClassA" checked="">Class A<br>
        <div id="genClassBGroup"><input type="radio" name="dataClass" id="genClassB">Class B</div><br>
      </div>
    </div>
    <br>
    <div id="modelPlaceholder"></div>
  </div>

  <dialog id="exportDlg" class="dialog">
    <center><h3>Export</h3></center>
      <form method="dialog">
        <textarea id="exportData" cols="50" rows="30"></textarea><br>
        <a id="exportDownloadBtn" class="dialogBtn downloadBtn" href="">Download</a>
        <button id="exportCloseBtn" class="dialogBtn">Close</button>
      </form>
  </dialog>

  <dialog id="importDlg" class="dialog">
    <center><h3>Import</h3></center>
      <form method="dialog">
        <textarea id="importData" cols="50" rows="30" placeholder="Paste/Type your import here!"></textarea><br>
        <div class="dialogBtn fileUploadBtn boxAlign">Upload<input id="importUpload" type="file" name="file" class="upload"></div>
        <button id="importDataBtn" class="dialogBtn">Import</button>
        <button id="importCloseBtn" class="dialogBtn">Close</button> 
      </form>
  </dialog>
</div>

<script>
  function importDataGen() {
    // Import/Add
    var oImport = document.currentScript.ownerDocument;

    // Fill model placeholder
    var oModelElem = document.getElementById( 'model' );
    var oElement = oImport.querySelector( '#modelPlaceholder' );
    oElement.appendChild( oModelElem.cloneNode( true ) );    

    oModelElem.parentNode.removeChild( oModelElem );

    // Add import to document
    var oPlaceholder = document.getElementById( 'dataGenPlaceholder' );
    oElement = oImport.querySelector( '#dataGen' );
    oPlaceholder.appendChild( oElement.cloneNode( true ) );

    oElement.parentNode.removeChild( oElement );

    // Init logic
    oDataGen = new vml_DataGen();
    oDataGen.Init();
  };
</script>
</div>
  <center><h1>KNN - K nearest neighbors</h1></center>

  <div id="dataGenPlaceholder"></div>

  <div id="model" class="groupBox">
    <b>Model:</b><br>
    <div class="tooltip">Size of neighborhood:<span class="tooltiptext">Number of neighbors used for prediction</span></div><br>
    <input type="number" id="k" value="1">
    <br><br>
    <button id="fitBtn" class="button">Fit</button>
    <button id="evalBtn" class="button">Evaluate</button>
  </div>

  <div id="evaluationDlgsPlaceholder"></div>

  <div id="footerPlaceholder"></div>

  <script type="text/javascript">
    // Import
    importDataGen();
    importEvaluation();
    importFooter();
 
    // Init
    var oLogic = new vml_KnnUI();
    oLogic.Init();
  </script>


</body></html>
