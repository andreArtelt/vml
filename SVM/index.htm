<!DOCTYPE html><html><head><meta charset="UTF-8">
  <meta http-equiv="content-type" content="text/html; charset=UTF8">

  <script src="../Libs/mathjs/math.js"></script>
  <script src="../vmljs/Utils/math.js"></script>
  <script src="../vmljs/Utils/utils.js"></script>
  <script src="../vmljs/Utils/modelEvaluation.js"></script> 
  <script src="../Libs/d3js/d3-3.5.16/d3.js"></script>
  <script src="../vmljs/Utils/plotHelper.js"></script>
  <script src="../vmljs/svm.js"></script>
  <script src="svmUI.js">// svmui.js
// VML - Visualization Machine Learning
// Copyright <c> Andr√© Artelt
// The MIT License (MIT)
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

function vml_SvmUI() {
    this.oDataGen = null;
    this.oModel = null;

    this.lDecBound = [];
    this.lData = [];
    this.lLabels = [];
    this.lGrid = [];
    this.lDecBound = [];
    this.lErrorOverTime = [];
    this.iTime = -1;

    // Init
    this.Init = function() {
        try {
            // Init
            this.oDataGen = oDataGen;
            this.oModel = new vml_SVM();
            this.InitGrid();
            this.GetKernel();

            // Register eventhandler
            document.getElementById( "trainBtn" ).addEventListener( "click", this.Train.bind( this ), false );
            document.getElementById( "resetModelBtn" ).addEventListener( "click", this.Reset.bind( this ), false );
            document.getElementById( "evalBtn" ).addEventListener( "click", this.Evaluation.bind( this ), false );
            document.getElementById( "trainCurveBtn" ).addEventListener( "click", this.TrainCurve.bind( this ), false );
            document.getElementById( "kernelSelect" ).addEventListener( "change", this.GetKernel.bind( this ), false );
            document.getElementById( "showSuppVecs" ).addEventListener( "change", this.Plot.bind( this ), false );
        }
        catch( ex ) {
            alert( "Fatal error: Can not initialize!\n" + ex );
        }
    };

    this.Plot = function() {
        var oPlotHelper = new vml_PlotHelper();

        var lData = [ { lData: this.oDataGen.oClassA.Data, name: "Class A", color: "red", size: 3.5, symbol: "circle" }, { lData: this.oDataGen.oClassB.Data, name: "Class B", color: "black", size: 3.5, symbol: "circle" } ];

        if( this.ShowSupportVectors() == true ) {
            var lSupportVectors = [ { lData: [], name: "SuppVec A", color: "red", symbol: "cross" }, { lData: [], name: "SuppVec B", color: "black", symbol: "cross" } ];

            for( var i=0; i != this.oModel.lSuppVecs.length; i++ ) {
                if( this.oModel.lSuppVecsLabels[ i ] == -1 ) {
                    lSupportVectors[ 1 ].lData.push( this.oModel.lSuppVecs[ i ].valueOf() );
                }
                else {
                    lSupportVectors[ 0 ].lData.push( this.oModel.lSuppVecs[ i ].valueOf() );
                }
            }

            lData = lData.concat( lSupportVectors );
        }

        oPlotHelper.CreateHeatmapScatterPlot( this.lDecBound, lData, "plotArea", 0.05 );
    };

    this.Evaluation = function() {
        try {
            // Evaluate model
            var lLabels = this.lLabels.map( function( x ){ return x == -1 ? 1 : 0; } );
            var oEvaluation = new vml_ClassifierEvaluation( this.lData, lLabels, this.oModel, 2 ).AllMetrics();

            // Show evaluation
            var oEvalDlg = new vml_EvaluationDlg();
            oEvalDlg.Init( false, oEvaluation );
            oEvalDlg.Show();
        }
        catch( ex ) {
            alert( "Error: " + ex );
        }
    };

    this.TrainCurve = function() {
        try {
            var oDlg = new vml_TrainingCurvePlotDlg();
            oDlg.Init( "Training curve", this.lErrorOverTime, {min: 0, max: this.iTime}, {min: this.lErrorOverTime[ 0 ][ 1 ], max: this.lErrorOverTime[ this.lErrorOverTime.length - 1 ][ 1 ]}, "Error" );
            oDlg.Show();
        }
        catch( ex ) {
            alert( "Error: " + ex );
        }
    };

    this.GetKernel = function() {
        var strKernel = this.KernelSelected();

        if( strKernel == "linear" ) {
            var bias = this.GetBias();
            this.oModel.kernel = function(a, b){return vml_Math.Kernel_Linear(a, b, bias);};
            document.getElementById( "degreeCtrl" ).style.display = "none";
            document.getElementById( "sigmaCtrl" ).style.display = "none";
        }
        else if( strKernel == "polynomial" ) {
            var bias = this.GetBias();
            var degree = this.GetDegree();
            this.oModel.kernel = function(a, b){return vml_Math.Kernel_Polynomial(a, b, degree, bias);};
            document.getElementById( "degreeCtrl" ).style.display = "block";
            document.getElementById( "sigmaCtrl" ).style.display = "none";
        }
        else if( strKernel == "gauss" ) {
            var sigma = this.GetSigma();
            this.oModel.kernel = function(a, b){return vml_Math.Kernel_Gaussian(a, b, sigma);};
            document.getElementById( "degreeCtrl" ).style.display = "none";
            document.getElementById( "sigmaCtrl" ).style.display = "block";
        }
    };

    this.GetBias = function() {
        var iResult = document.getElementById( "bias" ).value;
        if( iResult == "" || iResult == undefined ) {
            return 0;
        }
        else {
            return parseInt( iResult );
        }
    };

    this.GetSigma = function() {
        var fResult = document.getElementById( "sigma" ).value;
        if( fResult == "" || fResult == undefined ) {
            return 0.0;
        }
        else {
            return parseFloat( fResult );
        }
    };

    this.GetDegree = function() {
        var iResult = document.getElementById( "degree" ).value;
        if( iResult == "" || iResult == undefined) {
            return 0;
        }
        else {
            return parseInt( iResult );
        }
    };

    this.GetSlackPenalty = function() {
        var iResult = document.getElementById( "slackPenalty" ).value;
        if( iResult == "" || iResult == undefined ) {
            this.iC = 0;
        }
        else {
            this.iC = parseInt( iResult );
        }

        return this.iC;
    };

    this.GetLearningRate = function() {
        var fResult = document.getElementById( "learningRate" ).value;
        if( fResult == "" || fResult == undefined ) {
            return 1.0;
        }
        else {
            return parseFloat( fResult );
        }
    };

    this.GetNumberOfIterations = function() {
        var iResult = document.getElementById( "numTrainItr" ).value;
        if( iResult == "" || iResult == undefined ) {
            return 0;
        }
        else {
            return parseInt( iResult );
        }
    };

    this.ShowSupportVectors = function() {
        return document.getElementById( "showSuppVecs" ).checked;
    };

    this.InitGrid = function() {
        this.lGrid = vml_Utils.BuildGridWithoutBias( -5, 5, -5, 5, 0.05 );
    };

    this.KernelSelected = function() {
        return document.getElementById( "kernelSelect" ).value;
    };

    this.Reset = function() {
        try {
            // Make sure data is converted
            this.ConvertDataPoints( this.oDataGen.oClassA.Data, this.oDataGen.oClassB.Data );

            // Reset model
            this.oModel.Init( this.lData, this.lLabels, this.GetSlackPenalty() );

            // Get current kernel
            this.GetKernel();

            // Recompute decision boundary
            this.ComputeDecisionBoundary();

            // Refresh plot
            this.Plot();

            // Reset error
            this.lDecBound = [];
            this.lErrorOverTime = [];
            this.iTime = 0;
        }
        catch( ex ) {
            alert( "Error: " + ex );
        }
    };

    this.ConvertDataPoints = function( lClassA, lClassB ) {
        this.lData = [];
        this.lLabels = [];

        // Create list of vectors of shape (x, y)
        for( var i=0; i != lClassA.length; i++) {
            var point = lClassA[i];

            this.lData.push( math.matrix( [ point[0], point[1] ] ) );
            this.lLabels.push( 1 );
        }
        for( var i=0; i != lClassB.length; i++ ) {
            var point = lClassB[ i ];

            this.lData.push( math.matrix( [ point[0], point[1] ] ) );
            this.lLabels.push( -1 );
        }
    };

    this.ComputeDecisionBoundary = function() {
        // Reset decision boundary
        this.lDecBound = [];

        this.oModel.GetSupportVectors();  // Recompute support vectors

        for(var i=0; i != this.lGrid.length; i++) {
            var vecPoint = this.lGrid[ i ];
            var pred = this.oModel.Predict( vecPoint, false )[0];

            this.lDecBound.push( vecPoint.concat( [ pred ] ) );
        }
    };

    this.Train = function() {
        try {
            var fLambda = this.GetLearningRate();

            if( this.iTime == 0 ) {
                var fError = this.oModel.ComputeError();
                this.lErrorOverTime.push( [ this.iTime, fError ] );
            }

            // Run training iterations
            for( var i=0; i != this.GetNumberOfIterations(); i++ ) {
                this.oModel.FitStep( fLambda );
            }

            // Compute current error
            this.iTime += this.GetNumberOfIterations();
            var fError = this.oModel.ComputeError();
            this.lErrorOverTime.push( [ this.iTime, fError ] );

            // Recompute decision boundary
            this.ComputeDecisionBoundary();

            // Refresh plot
            this.Plot();
        }
        catch( ex ) {
            alert( "Error: " + ex );
        }
    };
}
</script>

  <title>VML - SVM</title>
</head>
<body><div hidden="" by-vulcanize=""><link rel="stylesheet" type="text/css" href="../Components/Footer/footer.css">

<div id="footer" class="footer">
 <br><br><br><br>
  VML - Visualization of Machine Learning<br>
  <a href="https://github.com/andreArtelt/vml">Project on GitHub</a><br>
  Copyright ¬© 2016-2016 Andr√© Artelt
</div>

<script>
  function importFooter() {
    // Import/Add
    var oImport = document.currentScript.ownerDocument;

    var oPlaceholder = document.getElementById( 'footerPlaceholder' );
    var oElement = oImport.querySelector( '#footer' );
    oPlaceholder.appendChild( oElement.cloneNode( true ) );

    oElement.parentNode.removeChild( oElement );
  };
</script>
<link rel="stylesheet" type="text/css" href="../Libs/dialog-polyfill/dialog-polyfill.css">
<link rel="stylesheet" type="text/css" href="../styles/dialog.css">
<link rel="stylesheet" type="text/css" href="../Components/Evaluation/evaluation.css">

<script src="../Libs/dialog-polyfill/dialog-polyfill.js"></script>
<script src="../Components/Evaluation/evaluation.js"></script>

<div id="evaluationDlgs">
  <dialog id="evaluationClassifierDlg" class="dialog evalDlg">
    <center><h3>Evaluation</h3></center>
    <form method="dialog">
      <div class="textAlign">
        <section>
          <b>Accuracy: </b>
          <span id="EVAL_ACC"></span>
        </section>
        <section>
          <b>AvgAccPerClass: </b>
          <span id="EVAL_AVGACCPERCLASS"></span>
        </section>
        <section>
          <b>PerClassAcc: </b>
          <span id="EVAL_PERCLASSACC"></span>
        </section>
        <section>
          <b>Confusion matrix: </b>
          <table>
	    <tbody><tr>
              <td>Label\Pred</td>
	      <td>Pos</td>
	      <td>Neg</td>
	    </tr>
	    <tr>
	      <td>Pos</td>
	      <td id="EVAL_CONFMAT_TP"></td>
	      <td id="EVAL_CONFMAT_FN"></td>
            </tr> 
            <tr>
	      <td>Neg</td>
	      <td id="EVAL_CONFMAT_FP"></td>
	      <td id="EVAL_CONFMAT_TN"></td>
	    </tr>
	  </tbody></table>
        </section>
        <section>
          <b>Precision: </b>
          <span id="EVAL_PRECISION"></span>
        </section>
        <section>
          <b>Recall: </b>
          <span id="EVAL_RECALL"></span>
        </section>
        <section>
          <b>F1: </b>
          <span id="EVAL_F1SCORE"></span>
        </section>
        <section>
          <b>FallOut: </b>
          <span id="EVAL_FALLOUT"></span>
        </section>
        <section>
          <b>LogLoss: </b>
          <span id="EVAL_LOGLOSS"></span>
        </section>
      </div>
      <br>

      <button class="dialogBtn">Close</button>
    </form>
  </dialog>

  <dialog id="evaluationRegressionDlg" class="dialog">
    <center><h3>Evaluation</h3></center>
    <form method="dialog">
      <div class="textAlign">
        <section>
          <b>RMSE: </b>
          <span id="EVAL_RMSE"></span>
        </section>
        <section>
          <b>MAPE: </b>
          <span id="EVAL_MAPE"></span>
        </section>
        <section>
          <b>ACP: </b>
          <span id="EVAL_ACP"></span>
        </section>
      </div>
      <br>

      <button class="dialogBtn">Close</button>
    </form>
  </dialog>
</div>

<script>
  function importEvaluation() {
    // Import/Add
    var oImport = document.currentScript.ownerDocument;

    var oPlaceholder = document.getElementById( 'evaluationDlgsPlaceholder' );
    var oElement = oImport.querySelector( '#evaluationDlgs' );
    oPlaceholder.appendChild( oElement.cloneNode( true ) );

    oElement.parentNode.removeChild( oElement );

    // Register dialogs
    dialogPolyfill.registerDialog( document.getElementById( 'evaluationClassifierDlg' ) );
    dialogPolyfill.registerDialog( document.getElementById( 'evaluationRegressionDlg' ) );
  };
</script>
<link rel="stylesheet" type="text/css" href="../Libs/dialog-polyfill/dialog-polyfill.css">
<link rel="stylesheet" type="text/css" href="../styles/dialog.css">
<link rel="stylesheet" type="text/css" href="../Components/TrainingCurvePlot/trainCurvePlot.css">

<script src="../Libs/dialog-polyfill/dialog-polyfill.js"></script>
<script src="../Libs/flot/jquery.js"></script>
<script src="../Libs/flot/jquery.flot.js"></script>
<script src="../Libs/flot/jquery.flot.symbol.js"></script>
<script src="../Components/TrainingCurvePlot/trainingCurvePlot.js">// trainingCurvePlot.js
// VML - Visualization Machine Learning
// Copyright <c> Andr√© Artelt
// The MIT License (MIT)
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

/**
* @classdesc vml_TrainingCurvePlotDlg
* @class vml_TrainingCurvePlotDlg
* @constructor
*/
function vml_TrainingCurvePlotDlg() {
    this.lData = [];
    this.oPlotSettings = undefined;

    /**
    * Initialize plot.
    * @method Init
    * @memberof vml_TrainingCurvePlotDlg
    * @instance
    * @param {String} strTitle -
    * @param {Array} lScoreTime -
    * @param {Object} rangeX -
    * @param {Object} rangeY -
    * @param {String} strLabel -
    * @param {String} strColor -
    */
    this.Init = function( strTitle, lScoreTime, rangeX, rangeY, strLabel, strColor, strLegendPos ) {
        strLabel = strLabel == undefined ? "" : strLabel;
        strColor = strColor == undefined ? "#0000FF" : strColor;
        strLegendPos = strLegendPos == undefined ? "se" : strLegendPos;

        this.lData = [ { label: strLabel, color: strColor, data: lScoreTime, lines: {show: true } } ];
        this.oPlotSettings = { legend: {position: strLegendPos}, xaxis: rangeX, yaxis: rangeY, grid: { borderWidth: 0, aboveData: false, margin: { left: 50, right: 50 } } };

        document.getElementById( "trainCurveDlgTitle" ).innerHTML = strTitle;
    };

    /**
    * Show the dialog.
    * @method Show
    * @memberof vml_TrainingCurvePlotDlg
    * @instance
    */
    this.Show = function() {
        $.plot( "#trainCurveDlgPlotArea", this.lData, this.oPlotSettings );

        document.getElementById( "trainCurveDlg" ).showModal();
    };
}
</script>

<dialog id="trainCurveDlg" class="dialog">
  <center><h3 id="trainCurveDlgTitle"></h3></center>

  <div class="trainCurveArea">
    <div id="trainCurveDlgPlotArea" class="trainCurvePlot"></div>
  </div><br>

  <form method="dialog">
    <button id="trainCurveDlgCloseBtn" class="dialogBtn">Close</button>
  </form>
</dialog>

<script>
  function importTrainCurve() {
    // Import/Add
    var oImport = document.currentScript.ownerDocument;

    // Add import to document
    var oPlaceholder = document.getElementById( 'trainCurvePlaceholder' );
    var oElement = oImport.querySelector( '#trainCurveDlg' );
    oPlaceholder.appendChild( oElement.cloneNode( true ) );

    oElement.parentNode.removeChild( oElement );

    // Register dialog
    dialogPolyfill.registerDialog( document.getElementById( 'trainCurveDlg' ) );
  };
</script>
<link rel="stylesheet" type="text/css" href="../Libs/dialog-polyfill/dialog-polyfill.css">
<link rel="stylesheet" type="text/css" href="../styles/buttons.css">
<link rel="stylesheet" type="text/css" href="../styles/tooltips.css">
<link rel="stylesheet" type="text/css" href="../Components/DataGen/dataGen.css">

<script src="../Libs/dialog-polyfill/dialog-polyfill.js"></script>
<script src="../Libs/flot/jquery.js"></script>
<script src="../Libs/flot/jquery.flot.js"></script>
<script src="../Libs/flot/jquery.flot.symbol.js"></script>
<script src="../vmljs/Utils/utils.js"></script>
<script src="../vmljs/Utils/fileHelper.js"></script>
<script src="../vmljs/Utils/matFileHelper.js"></script>
<script src="../vmljs/Utils/jsonHelper.js"></script>
<script src="../vmljs/Utils/csvHelper.js"></script>
<script src="../Components/DataGen/dataGen.js"></script>
<script src="../Libs/base64-arraybuffer-0.1.5/lib/base64-arraybuffer.js"></script>

<div id="dataGen">
  <div id="plotArea" class="boxAlign"></div>
  
  <div class="boxAlign">
    <div class="groupBox">
      <div id="actions">
        <b>Actions:</b><br>
	<button id="undoBtn" class="button">Undo</button>
        <button id="resetBtn" class="button">Reset</button><br>
        <div id="exportBtn" class="dropdown dropDownBtn">Export
         <div class="dropdown-content">
           <button id="btnExportToJSON" class="button">JSON</button>
           <button id="btnExportToCSV" class="button">CSV</button>
           <button id="btnExportToMAT" class="button">MAT</button>
         </div>
        </div>
        <div id="importBtn" class="dropdown dropDownBtn">Import
         <div class="dropdown-content">
           <button id="btnImportFromJSON" class="button">JSON</button>
           <button id="btnImportFromCSV" class="button">CSV</button>
	   <button id="btnImportFromMAT" class="button" onclick="document.getElementById('ctrlImportFromMAT').click();">MAT</button>
         </div>
        </div>
        <input id="ctrlImportFromMAT" type="file" name="file" style="visibility:hidden">
      </div> 
      <br>
      <div id="dataGenType">
        <div class="tooltip"><b>Click type:</b>
        <span class="tooltiptext">Specify what type of point a click in the plot will generate</span>
        </div><br>
        <input type="radio" name="dataClass" id="genClassA" checked="">Class A<br>
        <div id="genClassBGroup"><input type="radio" name="dataClass" id="genClassB">Class B</div><br>
      </div>
    </div>
    <br>
    <div id="modelPlaceholder"></div>
  </div>

  <dialog id="exportDlg" class="dialog">
    <center><h3>Export</h3></center>
      <form method="dialog">
        <textarea id="exportData" cols="50" rows="30"></textarea><br>
        <a id="exportDownloadBtn" class="dialogBtn downloadBtn" href="">Download</a>
        <button id="exportCloseBtn" class="dialogBtn">Close</button>
      </form>
  </dialog>

  <dialog id="importDlg" class="dialog">
    <center><h3>Import</h3></center>
      <form method="dialog">
        <textarea id="importData" cols="50" rows="30" placeholder="Paste/Type your import here!"></textarea><br>
        <div class="dialogBtn fileUploadBtn boxAlign">Upload<input id="importUpload" type="file" name="file" class="upload"></div>
        <button id="importDataBtn" class="dialogBtn">Import</button>
        <button id="importCloseBtn" class="dialogBtn">Close</button> 
      </form>
  </dialog>
</div>

<script>
  function importDataGen() {
    // Import/Add
    var oImport = document.currentScript.ownerDocument;

    // Fill model placeholder
    var oModelElem = document.getElementById( 'model' );
    var oElement = oImport.querySelector( '#modelPlaceholder' );
    oElement.appendChild( oModelElem.cloneNode( true ) );    

    oModelElem.parentNode.removeChild( oModelElem );

    // Add import to document
    var oPlaceholder = document.getElementById( 'dataGenPlaceholder' );
    oElement = oImport.querySelector( '#dataGen' );
    oPlaceholder.appendChild( oElement.cloneNode( true ) );

    oElement.parentNode.removeChild( oElement );

    // Init logic
    oDataGen = new vml_DataGen();
    oDataGen.Init();
  };
</script>
</div>
  <center><h1>SVM - Support Vector Machine</h1></center>

  <div id="dataGenPlaceholder"></div>

  <div id="model" class="groupBox">
    <b>Model:</b><br>
    <div class="tooltip">Kernel:<span class="tooltiptext">Select a kernel</span></div><br>
    <select id="kernelSelect"><option value="linear">Linear</option><option value="polynomial">Polynomial</option><option value="gauss">Gauss</option></select><br>

    <div class="tooltip">SlackPenalty:<span class="tooltiptext">Control the slack variables</span></div><br>
    <input type="number" id="slackPenalty" value="50"><br>
    <div class="tooltip">Bias:<span class="tooltiptext">Bias of linear function</span></div><br>
    <input type="number" id="bias" value="0"><br>
    <div id="degreeCtrl"><div class="tooltip">Degree:<span class="tooltiptext">Degree of polynomial</span></div><br>
    <input type="number" id="degree" value="1"></div><br>
    <div id="sigmaCtrl"><div class="tooltip">Sigma:<span class="tooltiptext">Sigma of gaussian dristribution</span></div><br>
    <input type="number" id="sigma" value="1"></div><br>

    <div class="tooltip">Learning rate: <input type="number" id="learningRate" value="0.01">
    <span class="tooltiptext">Learing-rate</span></div><br>
    <div class="tooltip">Training iterations: <input type="number" id="numTrainItr" value="10">
    <span class="tooltiptext">Number of training iterations</span></div><br>
    <div class="tooltip">Support vectors: <input type="checkbox" id="showSuppVecs" value="false">
    <span class="tooltiptext">Show support vectors</span></div><br>
    <br>
    <button id="resetModelBtn" class="button">Reset</button>
    <button id="evalBtn" class="button">Evaluation</button><br>
    <button id="trainBtn" class="button">Train</button>
    <button id="trainCurveBtn" class="button">TrainCurve</button>
  </div>

  <div id="evaluationDlgsPlaceholder"></div>

  <div id="trainCurvePlaceholder"></div>

  <div id="footerPlaceholder"></div>

  <script type="text/javascript">
    // Import
    importDataGen();
    importEvaluation();
    importTrainCurve();
    importFooter();
 
    // Init
    //vulcanize --exclude "../Libs/" --exclude "../vmljs/" --exclude "../Components/DataGen/dataGen.js" --exclude "../Components/Evaluation/evaluation.js" --exclude "svmui.js" index.htm > build.htm
    var oLogic = new vml_SvmUI();
    oLogic.Init();
  </script>


</body></html>
